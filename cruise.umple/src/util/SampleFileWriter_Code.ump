/*

Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

Helper classes that re needed by the Umple system, but are not key to understanding the metamodel

The class SampleFileWriter is composed from two mixins. For use in the core Umple Compiler and test system, it depends on Junit and has some junit assertions. These are in this file.

For broader use as an umple utility, the mixin FileUtils.ump adds more capability
*/

namespace cruise.umple.util;

use FileUtils.ump;

class SampleFileWriter 
{
  depend org.junit.*;

  public static void assertEitherFileContent(File expected1, File expected2, String actual)
  {
    try
    {
      assertFileContent(expected1,actual);
    }
    catch (AssertionError e)
    {
      assertFileContent(expected2,actual);
    }
  }
  
  private static String readLine(BufferedReader reader)
  {
    try{    
        String nextLine = reader.readLine();
        return nextLine == null ? null : nextLine.trim();
    } catch (Exception e){
        Assert.fail(e.getMessage());
        return null;
    }
  }
  
  public static void assertPartialFileContent(File partial, String actual)
  {
    BufferedReader expectedReader = null;
    BufferedReader actualReader = null;
    boolean foundMatch = false;
    
    try
    {
      expectedReader = new BufferedReader(new FileReader(partial));
      actualReader = new BufferedReader(new StringReader(actual));
      
      String expectedLine = null;
      String actualLine = null;
      
      int line = 0;
      do 
      {
        if (expectedLine == null || foundMatch)
        {
          expectedLine = readLine(expectedReader);
        }
        actualLine = readLine(actualReader);
        // HACK: To deal with // line # comments
        while (actualLine != null && (actualLine.indexOf("// line") != -1 ||  actualLine.indexOf("# line") != -1))
        { //Ignore the line, go to next
          actualLine = readLine(actualReader);
        }

        // Deal with Code from template
        while (actualLine != null && actualLine.indexOf("/* Code from template") != -1)
        { //Ignore the line, go to next
          actualLine = readLine(actualReader);
        }        
        
        line++;
        
        if (expectedLine == null) 
        {
          break; 
        }
        else if (foundMatch)
        {
          Assert.assertEquals("Failed at:" + line,expectedLine,actualLine);
        }
        else if (expectedLine.equals(actualLine))
        {
          foundMatch = true;
        }
      } 
      while (expectedLine != null);
    }
    catch (Exception e)
    {
      Assert.fail(e.getMessage());
    }
    finally
    {
      closeAsRequired(expectedReader);
      closeAsRequired(actualReader);
    }
    if (!foundMatch) { Assert.fail("Did not find expected lines"); }
  }
  
  public static void assertFileContent(File expected, String actual)
  {
    assertFileContent(expected, actual, true);
  }
  
  public static void assertFileContent(File expected, String actual, boolean ignoreLineComments){
    try
    {
      assertFileContent(new BufferedReader(new FileReader(expected)),new BufferedReader(new StringReader(actual)),ignoreLineComments);
    }
    catch (FileNotFoundException e)
    {
      Assert.fail(e.getMessage());
    }
  }
  
  public static void assertFileContent(File expected, File actual, boolean ignoreLineComments){
    try
    {
      assertFileContent(new BufferedReader(new FileReader(expected)),new BufferedReader(new FileReader(actual)),ignoreLineComments);
    }
    catch (FileNotFoundException e)
    {
      Assert.fail(e.getMessage());
    }
  }
  
  public static void assertFileContent(BufferedReader expectedReader, BufferedReader actualReader, boolean ignoreLineComments)
  {
    Boolean skippedActualLineDifference;
    try
    {
      String expectedLine = null;
      String actualLine = null;
      
      int line = 0;
    do 
      {
        actualLine = actualReader.readLine();
        expectedLine = expectedReader.readLine();
        skippedActualLineDifference = false;
        if (ignoreLineComments)
        {
          // Skip past elements that may change in updated code but are not important differences
          while (actualLine != null && (actualLine.indexOf("// line") != -1 ||
                    actualLine.indexOf("# line") != -1 ||
                    actualLine.indexOf("/* Code from template") != -1 ||
                    actualLine.matches("\\s*\\/\\/ END OF UMPLE (BEFORE|AFTER) INJECTION") ||
                    actualLine.matches("\\s*\\# END OF UMPLE (BEFORE|AFTER) INJECTION")))
          { //Ignore the line, go to next - line found has unimportant difference
            actualLine = actualReader.readLine();
            skippedActualLineDifference = true;
          }
          
          while (expectedLine != null && (expectedLine.indexOf("// line") != -1 ||
                    actualLine.indexOf("# line") != -1 ||
                    expectedLine.indexOf("/* Code from template") != -1 ||  
                    (skippedActualLineDifference == true && expectedLine.trim().isEmpty()) ||      
                    expectedLine.matches("\\s*\\/\\/ END OF UMPLE (BEFORE|AFTER) INJECTION")||
                    expectedLine.matches("\\s*\\# END OF UMPLE (BEFORE|AFTER) INJECTION")))
          { 
        	  expectedLine = expectedReader.readLine();
        	  skippedActualLineDifference = false; // Only skip one blank
          }
             
        } 
        
        line++;
        
        // HACK: To deal with umple version issues
        if (expectedLine != null && expectedLine.indexOf("This code was generated using the UMPLE") == -1)
        {
          Assert.assertEquals("Failed at:" + line,expectedLine,actualLine);  
        }
      } 
      while (expectedLine != null && actualLine != null);
      
      if(expectedLine == null && line == 1)
      {
      	Assert.fail(("Expected output file is empty."));
      }
    }
    catch (Exception e)
    {
      Assert.fail(e.getMessage());
    }
    finally
    {
      closeAsRequired(expectedReader);
      closeAsRequired(actualReader);
    }    
  }
  
  public static void assertFileExists(final String path) {
    Assert.assertTrue("File, " + path + ", does not exist.", (new File(path)).exists());
  }
  

}
