/*

Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

Model for importing XMI and generating Umple code

*/

namespace cruise.umple.compiler;

class UmpleImportHandler
{
    abstract;
      
  UmpleImportModel model = new UmpleImportModel("");
  internal Optional<Exception> parseException = Optional.empty();
      
  public UmpleImportModel readDataFromXML(String filename) throws IOException, ParserConfigurationException {
    /* TODO why was this commented?
    if(!UmpleEcoreValidator.getInstance().validate(Paths.get(filename))){
          System.err.println("Ecore model used is not valid");
      }
      */

      try (FileInputStream fis = new FileInputStream(filename)) {
        return readDataFromXML(fis);
      }
  }
  
  /**
   * Read an {@link UmpleImportModel} from the input stream. 
   * @param input Stream to read from, it is the callers responsibility to close it. 
   * @throws IOException Thrown from {@link SAXParser#parse(InputStream, DefaultHandler)}
   * @throws ParserConfigurationException Thrown from {@link SAXParserFactory#newSAXParser()}
   */
  public UmpleImportModel readDataFromXML(InputStream input) throws IOException, ParserConfigurationException {
    if (input == null) {
      throw new NullPointerException("Input stream was null.");
    }

    SAXParserFactory factory = SAXParserFactory.newInstance();
    factory.setNamespaceAware(true);
    try {
      SAXParser parser = factory.newSAXParser();
      parser.parse(input, this);
    } catch (Exception e) {
      this.parseException = Optional.of(e);
    }

    return model;
  }

  Optional<Exception> getParseException() {
    return parseException;
  }

  Boolean isSuccessful() {
    return !parseException.isPresent();
  }
}

class EcoreImportHandler
{
    internal currentElement = "";
    internal UmpleImportClass currentClass = null;

  public void startDocument() throws SAXException {
      setModel(new UmpleImportModel(""));
  }

  public void endDocument() throws SAXException {
    // System.out.println("end document");
  }

  public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
    currentElement = localName;
    UmpleImportModel model = getModel();    
    //load package object
    if (currentElement.equals("EPackage")) {
      UmpleImportPackage umplePackage = new UmpleImportPackage(UmpleImportConstants.ECORE_PACKAGE, "");
      String nameSpace = attributes.getValue(UmpleImportConstants.XMI_PACKAGENAME);
      
      // If no attribute "nsURI", use attribute "name" instead
      if (nameSpace == null || nameSpace.isEmpty()) {
        nameSpace = attributes.getValue(UmpleImportConstants.XMI_NAME);
      }
      
      if (nameSpace != null && !nameSpace.isEmpty()) {
        umplePackage.setName(nameSpace);
        model.addUmpleImportElement(umplePackage);
      }
    } 
    //load class/interface/dataType object
    else if (currentElement.equals("eClassifiers")) {
      String attrType = attributes.getValue(UmpleImportConstants.XMI_TYPE);
      boolean checkIsClass = attrType.equals(UmpleImportConstants.ECORE_CLASS);
      boolean checkIsDataType = attrType.equals(UmpleImportConstants.ECORE_DATATYPE);
      boolean checkDataTypeIsExtraClass = false;
      if (checkIsDataType){
        String dataTypeName = attributes.getValue(UmpleImportConstants.XMI_NAME);
        //exclude umple default date and time dataType
        boolean checkIsDate = dataTypeName.equals("Date");
        boolean checkIsTime = dataTypeName.equals("Time");
        checkDataTypeIsExtraClass = !(checkIsDate||checkIsTime);
      }
      if (checkIsClass || checkDataTypeIsExtraClass) {
        boolean isInterface = Boolean.parseBoolean(attributes.getValue(UmpleImportConstants.XMI_INTERFACE));
        boolean isAbstract = Boolean.parseBoolean(attributes.getValue(UmpleImportConstants.XMI_ABSTRACT));
        String currentPackageName = model.getCurrentPackageName();
        String className = attributes.getValue(UmpleImportConstants.XMI_NAME);
        UmpleImportClass umpleClass = new UmpleImportClass(UmpleImportConstants.ECORE_CLASS, className, currentPackageName, isAbstract, isInterface);
              currentClass = umpleClass;
              
        // note that it's possible that a class can have multiple interfaces
        String superType = attributes.getValue(UmpleImportConstants.XMI_SUPERTYPE);
        if (superType != null) 
          umpleClass.addSuperType(parseRawTypes(superType));
        model.addUmpleImportElement(umpleClass);
      }
    } 
    //load class attributes and associations
    else if (currentElement.equals("eStructuralFeatures")) {
      String attrType = attributes.getValue(UmpleImportConstants.XMI_TYPE);
      boolean checkIsAttribute = attrType.equals(UmpleImportConstants.ECORE_ATTRIBUTE);
      boolean checkIsReference = attrType.equals(UmpleImportConstants.ECORE_REFERENCE);
      String attrName = attributes.getValue(UmpleImportConstants.XMI_NAME);
      String classAttrTypeRaw = attributes.getValue(UmpleImportConstants.ECORE_TYPE);
      String classAttrType=parseRawTypes(classAttrTypeRaw);
      String currentClassName = currentClass.getName();
      if(checkIsAttribute)
      {       
        UmpleImportAttribute umpleAttribute = new UmpleImportAttribute(UmpleImportConstants.ECORE_ATTRIBUTE, attrName, currentClassName, classAttrType);
        String attrUpper = attributes.getValue(UmpleImportConstants.XMI_UPPER);
        if(attrUpper!=null)
          umpleAttribute.setUpperBound(Integer.parseInt(attrUpper));
        currentClass.addUmpleImportAttribute(umpleAttribute);
      }
      if(checkIsReference)
      {
        String endClassName = null;
        String endClassNameRaw = attributes.getValue("eOpposite");
        
        String lower = attributes.getValue("lowerBound");
        String upper = attributes.getValue("upperBound");
        int lowerBound = (lower != null)? Integer.parseInt(lower):0;
        int upperBound = (upper != null)? Integer.parseInt(upper):-1;
        
        if(endClassNameRaw!=null)
          endClassName = endClassNameRaw.split(classAttrTypeRaw+"/")[1];
        UmpleImportAssociation umpleAssociation = new UmpleImportAssociation(UmpleImportConstants.ECORE_REFERENCE, attrName, currentClassName, classAttrType, endClassName);
        umpleAssociation.setLowerBound(lowerBound);
        umpleAssociation.setUpperBound(upperBound);
        UmpleImportAssociation oppoEnd = model.checkIfOppositeExist(umpleAssociation);
        if(oppoEnd==null)
          currentClass.addUmpleImportAssociation(umpleAssociation);
      }
    }
  }
  
  public void endElement(String uri, String localName, String qName) throws SAXException {
      // reset internal values for next round of parsing
      boolean checkIsClassifiers = currentElement.equals(currentElement.equals("eClassifiers"));
    if (checkIsClassifiers && currentClass != null)
      currentClass = null;
    currentElement = "";
  }

  public void characters(char[] ch, int start, int length) throws SAXException {
    // System.out.println("characters");
  }
    
  public void warning(SAXParseException e) throws SAXException {
    System.out.println("Warning: " + e.getMessage());
  }

  public void error(SAXParseException e) throws SAXException {
    System.out.println("Error: " + e.getMessage());
  }

  public void fatalError(SAXParseException e) throws SAXException {
    System.out.println("Fatal Error: " + e.getMessage());
  }
  
  private String parseRawTypes(String rawType) {
    String type = "";
    if (rawType.contains("#//"))
      type = rawType.split("#//")[1];
    else if (rawType.contains("/0/"))
      type = rawType.split("/0/")[1];
    else if (rawType.contains("/1/"))
      type = rawType.split("/1/")[1];
    else
      type = rawType;
    return type;
  }
}

class ScxmlImportHandler
{
  internal UmpleImportClass currentClass = null;
  internal Stack<ImportStateMachineElement> elemStack = new Stack<ImportStateMachineElement>();
  Integer depth = 0;
  boolean isInitial = false;

  public void startDocument() throws SAXException {
    UmpleImportClass umpleClass = new UmpleImportClass("StateMachine", "StateMachine", "StateMachine", false, false);
    UmpleImportModel model = getModel();
    model.addUmpleImportElement(umpleClass);
    currentClass = umpleClass;
  }

  public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
    depth++;
    if("scxml".equals(localName)) {
      String stateMachineName = attributes.getValue("name");
      ImportStateMachine stateMachine = new ImportStateMachine("", "", depth, stateMachineName);
      stateMachine.setInitialState(attributes.getValue("initial"));
      currentClass.addImportStateMachine(stateMachine);
      elemStack.push(stateMachine);
    } else if ("state".equals(localName)) {
      String stateId = attributes.getValue("id");
      ImportStateMachineState state = new ImportStateMachineState("", "", depth, stateId);
      elemStack.peek().addImportStateMachineElement(state);
      elemStack.push(state);
    } else if ("transition".equals(localName)) {
      String event = attributes.getValue("event");
      String cond = attributes.getValue("cond");
      String target = attributes.getValue("target");

      ImportTransition transition = new ImportTransition("", "", depth, event, cond, target);

      if (isInitial) {
        if (elemStack.peek() instanceof ImportStateMachine) {
          ImportStateMachine sm = (ImportStateMachine)elemStack.peek();
          sm.setInitialState(target);
        } else if (elemStack.peek() instanceof ImportStateMachineState) { 
          ImportStateMachineState state = (ImportStateMachineState)elemStack.peek();
          state.setInitialState(target);
        }
      } else {
        elemStack.peek().addImportStateMachineElement(transition);
      }
      elemStack.push(transition);  
    } else if ("onentry".equals(localName)) {
      ImportAction onentry = new ImportAction("", "", depth, "entry");
      elemStack.peek().addImportStateMachineElement(onentry);
      elemStack.push(onentry);
    } else if ("onexit".equals(localName)) {
      ImportAction onexit = new ImportAction("", "", depth, "exit");
      elemStack.peek().addImportStateMachineElement(onexit);
      elemStack.push(onexit);
    } else if ("initial".equals(localName)) {
      isInitial = true;
    } else if ("raise".equals(localName)){
      ImportAction raise = new ImportAction("", "", depth, "raise");
      elemStack.peek().addImportStateMachineElement(raise);
      elemStack.push(raise);
    }
  }

  public void characters(char[] ch, int start, int length) {
    String chars = new String(ch, start, length);
    if (elemStack.peek() instanceof ImportAction) {
      ImportAction action = (ImportAction)elemStack.peek();
      action.getContent().append(chars);
    } else if (elemStack.peek() instanceof ImportTransition) {
      ImportTransition transition = (ImportTransition)elemStack.peek();
      transition.getAction().append(chars);
    }
  }

  public void endElement(String uri, String localName, String qName) throws SAXException {
    depth--;
    if ("script".equals(localName)) {
      return;
    }

    if ("initial".equals(localName)) {
      isInitial = false;
      return;
    }

    elemStack.pop();
  }
}

class PapyrusImportHandler
{

  internal currentElement = "";
  internal currentAttributeName = "";
  internal currentAttributeType = "";
  internal UmpleImportClass currentClass = null;
  internal UmpleImportAssociation currentAssociation = null;
  internal currentOwnedEndId = "";
  internal currentOwnedEndType = "";

  public void startDocument() throws SAXException {
    UmpleImportModel model = new UmpleImportModel("");  // set `currentPackageName` to ""
    setModel(model);
  }

  public void endDocument() throws SAXException {
  }

  public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
    currentElement = localName;
    UmpleImportModel model = getModel();   
    // load class
    if (currentElement.equals("packagedElement")) {
      String attributeType = attributes.getValue(UmpleImportConstants.PAPYRUS_TYPE);
      boolean isClass = attributeType.equals(UmpleImportConstants.PAPYRUS_CLASS);
      boolean isAssociation = attributeType.equals(UmpleImportConstants.PAPYRUS_ASSOCIATION);

      if (isClass) {
        boolean isInterface = Boolean.parseBoolean(attributes.getValue(UmpleImportConstants.XMI_INTERFACE));
        boolean isAbstract = Boolean.parseBoolean(attributes.getValue(UmpleImportConstants.XMI_ABSTRACT));
        String currentPackageName = model.getCurrentPackageName();
        String className = attributes.getValue(UmpleImportConstants.XMI_NAME);
        String classId = attributes.getValue(UmpleImportConstants.PAPYRUS_ID);

        UmpleImportClass umpleClass = new UmpleImportClass(classId, className, currentPackageName, isAbstract, isInterface);
        currentClass = umpleClass;
        model.addUmpleImportElement(umpleClass);
      }

      if (isAssociation) {
        String associationId = attributes.getValue(UmpleImportConstants.PAPYRUS_ID);
        String memberEnds = attributes.getValue(UmpleImportConstants.PAPYRUS_ASSOCIATION_MEMBER_END);
        String startClassId = memberEnds.split(" ")[0];
        String endClassId = memberEnds.split(" ")[1];

        currentAssociation = new UmpleImportAssociation(associationId, "", startClassId, endClassId, "");
      }
    } 
    // load class attributes
    else if (currentElement.equals("ownedAttribute")) {
      String attributeName = attributes.getValue(UmpleImportConstants.XMI_NAME);

      currentAttributeName = attributeName;
    } else if (currentElement.equals("generalization")) {
      String attributeId = attributes.getValue(UmpleImportConstants.PAPYRUS_ID);
      String attributeType = attributes.getValue(UmpleImportConstants.PAPYRUS_TYPE);
      String general = attributes.getValue(UmpleImportConstants.PAPYRUS_GENERAL);
      String generalization = "";

      List<UmpleImportElement> umpleImportElements = model.getUmpleImportElements();
      for (int i = 0; i < umpleImportElements.size(); ++i) {
        UmpleImportElement umpleImportElement = umpleImportElements.get(i);
        String umpleImportElementId = umpleImportElement.getId();

        if (general.equals(umpleImportElementId)) {
          generalization = umpleImportElement.getName();
          break;
        }
      }

      UmpleImportGeneralization umpleImportGeneralization = new UmpleImportGeneralization(attributeId, "", generalization);
      currentClass.addUmpleImportGeneralization(umpleImportGeneralization);
    } else if (currentElement.equals("type")) {
      String attributeType = attributes.getValue(UmpleImportConstants.PAPYRUS_TYPE);
      boolean isPrimitiveType = attributeType.equals(UmpleImportConstants.PAPYRUS_PRIMITIVE_TYPE);

      if (isPrimitiveType) {
        String attributeRawType = attributes.getValue(UmpleImportConstants.PAPYRUS_HREF).split("#")[1];
        String currentClassName = currentClass.getName();

        UmpleImportAttribute umpleAttribute = new UmpleImportAttribute("Papyrus:property", currentAttributeName, currentClassName, attributeRawType);
        currentClass.addUmpleImportAttribute(umpleAttribute);
      }
    } else if (currentElement.equals("ownedEnd")) {
      String association = attributes.getValue(UmpleImportConstants.PAPYRUS_OWNED_END_ASSOCIATION);

      if (association.equals(currentAssociation.getId())) {
        currentOwnedEndId = attributes.getValue(UmpleImportConstants.PAPYRUS_ID);
        currentOwnedEndType = attributes.getValue("type");
      }
    } else if (currentElement.equals("lowerValue") || currentElement.equals("upperValue")) {
      boolean isLowerValue = currentElement.equals("lowerValue");
      String strValue = attributes.getValue(UmpleImportConstants.PAPYRUS_OWNED_END_VALUE);

      if (currentAssociation != null) {
        boolean isStartClass = currentOwnedEndId.equals(currentAssociation.getStartClass());

        if (strValue.equals("*")) {
          if (isStartClass) {
            currentAssociation.setOtherLowerBound(0);
            currentAssociation.setOtherUpperBound(-1);
          } else {
            currentAssociation.setLowerBound(0);
            currentAssociation.setUpperBound(-1);
          }
        } else {
          Integer value = Integer.parseInt(strValue);

          if (isStartClass && isLowerValue) {
            currentAssociation.setOtherLowerBound(value);
          } else if (isStartClass && !isLowerValue) {
            currentAssociation.setOtherUpperBound(value);
          } else if (!isStartClass && isLowerValue) {
            currentAssociation.setLowerBound(value);
          } else {
            currentAssociation.setUpperBound(value);
          }
        }
      }
    }
  }

  public void endElement(String uri, String localName, String qName) throws SAXException {
    currentElement = localName;
    boolean isPackagedElement = currentElement.equals("packagedElement");
    boolean isOwnedEnd = currentElement.equals("ownedEnd");
    UmpleImportModel model = getModel();

    if (isPackagedElement && currentClass != null)
      currentClass = null;

    if (isPackagedElement && currentAssociation != null && !currentAssociation.getStartClass().isEmpty() && !currentAssociation.getEndClass().isEmpty()) {
      List<UmpleImportElement> umpleImportElements = model.getUmpleImportElements();
      List<UmpleImportElement> modifiableUmpleImportElement = new ArrayList<UmpleImportElement>();
      for (int i = 0; i < umpleImportElements.size(); ++i) {
        modifiableUmpleImportElement.add(umpleImportElements.get(i));
      }

      for (int i = 0; i < modifiableUmpleImportElement.size(); ++i) {
        UmpleImportElement umpleImportElement = modifiableUmpleImportElement.get(i);
        String umpleImportElementName = umpleImportElement.getName();

        if (currentAssociation.getStartClass().equals(umpleImportElementName)) {
          ((UmpleImportClass)umpleImportElement).addUmpleImportAssociation(currentAssociation);
          break;
        }
      }

      currentAssociation = null;
    }

    if (isOwnedEnd) {
      String className = "";

      List<UmpleImportElement> umpleImportElements = model.getUmpleImportElements();
      for (int i = 0; i < umpleImportElements.size(); ++i) {
        if (currentOwnedEndType.equals(umpleImportElements.get(i).getId())) {
          className = umpleImportElements.get(i).getName();
          break;
        }
      }

      if (currentOwnedEndId.equals(currentAssociation.getStartClass())) {
        currentAssociation.setStartClass(className);
      }
      if (currentOwnedEndId.equals(currentAssociation.getEndClass())) {
        currentAssociation.setEndClass(className);
      }
      currentOwnedEndId = "";
      currentOwnedEndType = "";
    }

    currentElement = "";
    currentAttributeName = "";
    currentAttributeType = "";
  }

  public void characters(char[] ch, int start, int length) throws SAXException {
  }
}

class UmpleImportHandlerFactory {

  public static UmpleImportHandler create(final UmpleImportType type) {
    if (type == UmpleImportType.ECORE) {
      return new EcoreImportHandler();
    } else if (type == UmpleImportType.SCXML) {
      return new ScxmlImportHandler();
    } else {
      throw new IllegalArgumentException("Unknown UmpleImportType: " + type);
    }
  }
}
