/*Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
https://umple.org/license

This generates simple metrics from Umple
  generate PlainRequirementsDoc;
in your umple file, or the command line option
  -g PlainRequirementsDoc
*/

namespace cruise.umple.compiler;

class PlainRequirementsDocGenerator
{
  isA CodeGenerator;
  depend java.io.*;
  depend java.util.*;
  depend cruise.umple.util.*;
  depend cruise.umple.compiler.exceptions.*;
  depend cruise.umple.parser.Token;
  
  
  UmpleModel model = null;
  String output = "";

  HtmlDocument doc = new HtmlDocument(true);

  void generate(){
    doc.createParagraphElement("Plain Requirements Doc from "+model.getUmpleFile().getSimpleFileName()+".ump", false);
    UmpleModelWalker walker = new UmpleModelWalker(model);
    // Intializing the TreeSet
    TreeSet<Requirement> ReqTreeSet;
    // Intializing the Comparator and assigning it to a default which is to sort by the identifier
    // This applies to default case including "PlainRequirementsDoc", "reqSortID" 
    Comparator<Requirement> defaultComparator = (r1, r2) -> r1.getIdentifier().compareTo(r2.getIdentifier());
    if (model.modelHasSuboption("PlainRequirementsDoc", "reqSortStat")) {
      // If -s reqSortStat is present the comparator is changed to be assigned to statement
      defaultComparator = (r1, r2) -> r1.getStatement().compareTo(r2.getStatement());
    } 
    // The TreeSet is created based on the chosen comparator
    ReqTreeSet = new TreeSet<>(defaultComparator);
    // Add all requirements found in the model to the TreeSet 
    ReqTreeSet.addAll(model.getAllRequirements().values());
    // Assigning the suboption to a variable 
    boolean hasreqHideNotImpl = model.modelHasSuboption("PlainRequirementsDoc", "reqHideNotImpl");
    // Assigning a variable to hold the filename so it can be output in the implemented by section
    String fileName = model.getUmpleFile().getSimpleFileName()+".ump";
    // Loop through the sorted reqs in the TreeSet and check if they have an implementation
    List<ReqImplementation> ReqImp = new ArrayList<ReqImplementation>(); 
    ReqImp = model.getReqImplementations();
    for (Requirement req : ReqTreeSet){
    	if (req.hasReqImplementations() || !hasreqHideNotImpl) {
    	  // Below string stores the requirement statement and language and translates to html
    	  String mainReqText = Requirement.translateToHTML(req.getStatement(), req.getLanguage());
    	  doc.createParagraphElement("<b>"+"" + req.getIdentifier() + ": " + mainReqText+"</b>", false);
    	  // Check if the requirement is implemented
          if(req.hasReqImplementations()) {
            // Append the text with this prompt
            doc.createParagraphElement("&nbsp;"+" IMPLEMENTED BY: ", false);
            // Loop through classes to check for attributes that have implementations
            for (UmpleClass aClass : getModel().getUmpleClasses())
   	    {
   	      for(ReqImplementation classimps : aClass.getReqImplementations())
   	      {
   	        for(ReqImplementation reqimps : req.getReqImplementations())
   	        {
   	          if(classimps.getIdentifier() == reqimps.getIdentifier())
   	          {
		     String classText= ""; 
		     int classLine=0;
	             String lineNum="";
	             for (ReqImplementation reqImpl : ReqImp)
	            {
	              if(reqImpl == classimps){
                      classLine = aClass.getPosition(0).getLineNumber();
                      }
	            }
	            if (aClass instanceof AssociationClass) {
	             
	               for(Association ass : aClass.getAssociations())
                        {
			   AssociationEnd myEnd = ass.getIsRightNavigable() ? ass.getEnd(0) : ass.getEnd(1);
		           AssociationEnd theirEnd = ass.getIsRightNavigable() ? ass.getEnd(1) : ass.getEnd(0);
		           String arrowDirection ="";
			   if(ass.isIsRightNavigable() && ass.isIsLeftNavigable())
			   {
			     arrowDirection = "--"; 
			   }
			   else if(ass.isIsLeftNavigable())
			   {
			     arrowDirection = "<-";
			   }
			   else if(ass.isIsRightNavigable())
			   {
			      arrowDirection = "->";
			   }
		           String assoStruct = StringFormatter.format("  {0} {1} {5} {3} {4} {2};\n", myEnd.getMultiplicity().getParserable(), myEnd.getRoleName(),theirEnd.getRoleName(), theirEnd.getMultiplicity().getParserable(), theirEnd.getClassName(),arrowDirection);
		           //assoLine = ass.getTokenPosition().getLineNumber();
			   classText = "&nbsp;"+"&nbsp;"+"association class:"+"&nbsp;"+assoStruct+"&nbsp;"+"in class"+"&nbsp;"+aClass.getName()+"&nbsp;"+fileName+"&nbsp;"+"line"+ "&nbsp;"+classLine+ " ; ";
	              doc.createParagraphElement("&nbsp;"+"&nbsp;"+classText, false);
	             }
	            }
	            else{
	              classText = "&nbsp;"+"&nbsp;"+"class:"+"&nbsp;"+aClass.getName()+"&nbsp;"+fileName+"&nbsp;"+"line"+"&nbsp;"+ classLine+ " ; ";
	              doc.createParagraphElement("&nbsp;"+"&nbsp;"+classText, false);
	            }
		  }
   	        }
   	      
   	      }
	      for (Attribute att : aClass.getAttributes())
	      { 
	        for(ReqImplementation classimps : att.getReqImplementations())
   	        {
   	        for(ReqImplementation reqimps : req.getReqImplementations())
   	        {
   	          if(classimps.getIdentifier() == reqimps.getIdentifier())
   	          {
	             String attrText= ""; 
	             int attLine=0;
	             if(att.hasReqImplementations()){
	              for (ReqImplementation reqImpl : ReqImp)
	              {
	                if(reqImpl == classimps){
                        attLine = att.getPosition().getLineNumber();
                        }
	              }
	             attrText = "&nbsp;"+"&nbsp;"+"attribute:"+"&nbsp;"+att.getName()+"&nbsp;"+"in class"+"&nbsp;"+aClass.getName()+"&nbsp;"+fileName+"&nbsp;"+"line"+ "&nbsp;"+ attLine+ " ; ";
	             doc.createParagraphElement("&nbsp;"+"&nbsp;"+attrText, false);
	              }
	           }
	         }
	        }  
	      }
	      // Loop through classes to check for state machines that have implementations
	      for (StateMachine sm : aClass.getStateMachines())
	      { 
	        for(ReqImplementation classimps : sm.getReqImplementations())
   	        {
   	          for(ReqImplementation reqimps : req.getReqImplementations())
   	          {
   	            if(classimps.getIdentifier() == reqimps.getIdentifier())
   	            {
	              String smText= ""; 
	              int smLine=0;
	                for (ReqImplementation reqImpl : ReqImp)
	                {
	                  if(reqImpl.getIdentifier() == classimps.getIdentifier()){
                          smLine = sm.getPosition().getLineNumber();
                          }
	                }
	               smText = "&nbsp;"+"&nbsp;"+"state machine:"+"&nbsp;"+sm.getName()+"&nbsp;"+"in class"+"&nbsp;"+aClass.getName()+"&nbsp;"+fileName+"&nbsp;"+"line"+"&nbsp;"+smLine+ " ; ";
	               doc.createParagraphElement("&nbsp;"+"&nbsp;"+smText, false);
	            }
	          }
	        }
	      }
	      // Loop through classes to check for associations that have implementations
	      for (AssociationVariable as : aClass.getAssociationVariables())
	      {
	        for(ReqImplementation classimps : as.getReqImplementations())
   	        {
   	          for(ReqImplementation reqimps : req.getReqImplementations())
   	          {
   	            if(classimps.getIdentifier() == reqimps.getIdentifier())
   	            {
	              String assoText= ""; 
	              int assoLine=0;
	                for(Association ass : aClass.getAssociations())
                        {
			   AssociationEnd myEnd = ass.getIsRightNavigable() ? ass.getEnd(0) : ass.getEnd(1);
		           AssociationEnd theirEnd = ass.getIsRightNavigable() ? ass.getEnd(1) : ass.getEnd(0);
		           String arrowDirection ="";
			   if(ass.isIsRightNavigable() && ass.isIsLeftNavigable())
			   {
			     arrowDirection = "--"; 
			   }
			   else if(ass.isIsLeftNavigable())
			   {
			     arrowDirection = "<-";
			   }
			   else if(ass.isIsRightNavigable())
			   {
			      arrowDirection = "->";
			   }
		           String assoStruct = StringFormatter.format("  {0} {1} {5} {3} {4} {2};\n", myEnd.getMultiplicity().getParserable(), myEnd.getRoleName(),theirEnd.getRoleName(), theirEnd.getMultiplicity().getParserable(), theirEnd.getClassName(),arrowDirection);
		           assoLine = ass.getTokenPosition().getLineNumber();
			   assoText = "&nbsp;"+"&nbsp;"+"association:"+"&nbsp;"+assoStruct+"&nbsp;"+"in class"+"&nbsp;"+aClass.getName()+"&nbsp;"+fileName+"&nbsp;"+"line"+ "&nbsp;"+assoLine+ " ; ";
	              doc.createParagraphElement("&nbsp;"+"&nbsp;"+assoText, false);
	             }
	           }
	         }
	       }
	      }
	      // Loop through classes to check for methods that have implementations
	       for(Method me : aClass.getMethods())
	       { 
	         for(ReqImplementation classimps : me.getReqImplementations())
   	         {
   	          for(ReqImplementation reqimps : req.getReqImplementations())
   	          {
   	            if(classimps.getIdentifier() == reqimps.getIdentifier())
   	            {
	              String meText= ""; 
	              int meLine=0;
	              for (ReqImplementation reqImpl : ReqImp)
	              {
	                 if(reqImpl == classimps){
                         meLine = me.getPosition().getLineNumber();
                       }
	              }
	           meText = "&nbsp;"+"&nbsp;"+"method:"+"&nbsp;"+me.getName()+"&nbsp;"+"class"+"&nbsp;"+aClass.getName()+"&nbsp;"+fileName+"&nbsp;"+"line"+ "&nbsp;"+meLine+ " ; ";
	           doc.createParagraphElement("&nbsp;"+"&nbsp;"+meText, false);
                     }
                   }
                 }
               }
	     }
	    // Loop through model to check for traits that have implementations
	    for(UmpleTrait tr : model.getUmpleTraits())
	    {
	       for(ReqImplementation classimps : tr.getReqImplementations())
   	         {
   	            for(ReqImplementation reqimps : req.getReqImplementations())
   	            {
   	              if(classimps.getIdentifier() == reqimps.getIdentifier())
   	              {
	                String trText= ""; 
	                int traitLine=0;
	                for (ReqImplementation reqImpl : ReqImp)
	                {
	                  if(reqImpl == classimps){
                            traitLine = tr.getPosition(0).getLineNumber();
                          }
	                }
	           trText = "&nbsp;"+"&nbsp;"+"trait:"+"&nbsp;"+tr.getName()+"&nbsp;"+fileName+"&nbsp;"+"line"+ "&nbsp;"+traitLine+ " ; ";
	           doc.createParagraphElement("&nbsp;"+"&nbsp;"+trText, false);
                   }
                 }
               }
             }
             // Loop through model to check for interfaces that have implementations
             for(UmpleInterface ui : model.getUmpleInterfaces())
	     {
	      for(ReqImplementation classimps : ui.getReqImplementations())
   	        {
   	          for(ReqImplementation reqimps : req.getReqImplementations())
   	          {
   	            if(classimps.getIdentifier() == reqimps.getIdentifier())
   	            {
	               String uiText= ""; 
	               int uiLine=0;
	               for (ReqImplementation reqImpl : ReqImp)
	               {
	                 if(reqImpl == classimps){
                            uiLine = ui.getPosition(0).getLineNumber();
                         }
	               }
	           uiText = "&nbsp;"+"&nbsp;"+"interface:"+"&nbsp;"+ui.getName()+"&nbsp;"+fileName+"&nbsp;"+"line"+ "&nbsp;"+uiLine+ " ; ";
	           doc.createParagraphElement("&nbsp;"+"&nbsp;"+uiText, false);
                  }
                 }
               }
             }
            // Loop through model to check for trait methods that have implementations
            for(UmpleTrait tr : model.getUmpleTraits())
	    {
	       for(Method aMeth : tr.getMethods())
		{
		   for(ReqImplementation classimps : aMeth.getReqImplementations())
   	            {
   	               for(ReqImplementation reqimps : req.getReqImplementations())
   	               {
   	                 if(classimps.getIdentifier() == reqimps.getIdentifier())
   	                 {
	                    String metText= ""; 
	                    int metLine=0;
	                    for (ReqImplementation reqImpl : ReqImp)
	                    {
	                     if(reqImpl == classimps){
                                metLine = tr.getPosition(0).getLineNumber();
                              }
	                    }
	           metText = "&nbsp;"+"&nbsp;"+"method:"+"&nbsp;"+aMeth.getName()+"&nbsp;"+"trait"+"&nbsp;"+tr.getName()+"&nbsp;"+fileName+"&nbsp;"+"line"+ "&nbsp;"+metLine+ " ; ";
	           doc.createParagraphElement("&nbsp;"+"&nbsp;"+metText, false);
                     }
                   }
                 }
	       }
	     }
	     // Loop through model to check for enums that have implementations
	     for(UmpleEnumeration ue : model.getEnums())
	     {
	        for(ReqImplementation classimps : ue.getReqImplementations())
   	            {
   	               for(ReqImplementation reqimps : req.getReqImplementations())
   	               {
   	                 if(classimps.getIdentifier() == reqimps.getIdentifier())
   	                 {
	                    String ueText= ""; 
	                    int ueLine=0;
	                    for (ReqImplementation reqImpl : ReqImp)
	                    {
	                     if(reqImpl.getIdentifier() == classimps.getIdentifier()){
                                ueLine = ue.getPosition().getLineNumber();
                              }
	                    }
	               ueText = "&nbsp;"+"&nbsp;"+"enum:"+"&nbsp;"+ue.getName()+"&nbsp;"+fileName+"&nbsp;"+"line"+ "&nbsp;"+ueLine+ " ; ";
	               doc.createParagraphElement("&nbsp;"+"&nbsp;"+ueText, false);
                       }
                     }
                  }
	        }
	       
	       for(MixsetOrFile mix : model.getMixsetOrFiles())
	       {
	        for(ReqImplementation classimps : mix.getReqImplementations())
   	            {
   	               for(ReqImplementation reqimps : req.getReqImplementations())
   	               {
   	                 if(classimps.getIdentifier() == reqimps.getIdentifier())
   	                 {
	                    String mixText= ""; 
	                    int mixLine=0;
	                    for (ReqImplementation reqImpl : ReqImp)
	                    {
	                     if(reqImpl.getIdentifier() == classimps.getIdentifier()){
                                mixLine = mix.getPosition().getLineNumber();
                              }
	                    }
	               mixText = "&nbsp;"+"&nbsp;"+"mixset:"+"&nbsp;"+mix.getName()+"&nbsp;"+fileName+"&nbsp;"+"line"+ "&nbsp;"+mixLine+ " ; ";
	               doc.createParagraphElement("&nbsp;"+"&nbsp;"+mixText, false);
                       }
                     }
                  }
	        }
	        
             }
         else {
            // If the requirement does not have an implementation
            doc.createParagraphElement("&nbsp;"+"NOT IMPLEMENTED.", false);
            }
          }
        }
    model.setCode(doc.toString());
    writeModel();
    return;
  }
  
  void writeModel(){
    try {
      String path = model.getUmpleFile().getPath();
      File file = new File(path);
      file.mkdirs();
      String modelFilename = path + File.separator + model.getUmpleFile().getSimpleFileName() + ".html";
      BufferedWriter bw = new BufferedWriter(new FileWriter(modelFilename));
      bw.write(model.getCode());
      bw.flush();
      bw.close();
    }
    catch (Exception e) {
      throw new UmpleCompilerException("There was a problem with generating RequirementDoc code. ;)" + e, e);
    }
  }
}

