from enum import Enum, auto

class Course():
    class Status(Enum):
        def _generate_next_value_(name, start, count, last_values):
            return name
        def __str__(self):
            return str(self.value)
        Open = auto()
        Full = auto()
        error1 = auto()

    def __init__(self):
        self._status = None
        self.setStatus(Course.Status.Open)

    def getStatusFullName(self):
        answer = self._status.__str__()
        return answer

    def getStatus(self):
        return self._status

    def register(self):
        wasEventProcessed = False
        aStatus = self._status
        if aStatus == Course.Status.Open :
            self.setStatus(Course.Status.Full)
            wasEventProcessed = True
        else :
            wasEventProcessed = self.unspecified(self.getStatus().__str__(), "register")
        return wasEventProcessed

    def unspecified(self, state, event):
        wasEventProcessed = False
        aStatus = self._status
        if aStatus == Course.Status.Open :
            self.setStatus(Course.Status.error1)
            wasEventProcessed = True
        else :
            pass
        return wasEventProcessed

    def reject(self):
        wasEventProcessed = False
        aStatus = self._status
        if aStatus == Course.Status.Full :
            self.setStatus(Course.Status.Full)
            wasEventProcessed = True
        else :
            pass
        return wasEventProcessed

    def __autotransition1__(self):
        wasEventProcessed = False
        aStatus = self._status
        if aStatus == Course.Status.error1 :
            self.setStatus(Course.Status.Open)
            wasEventProcessed = True
        else :
            pass
        return wasEventProcessed

    def setStatus(self, aStatus):
        self._status = aStatus
        if self._status == Course.Status.error1 :
            self.__autotransition1__()

    def delete(self):
        pass