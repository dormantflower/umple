#PLEASE DO NOT EDIT THIS CODE
#This code was generated using the UMPLE 1.32.1.6535.66c005ced modeling language!

from enum import Enum, auto

class X():
    #------------------------
    # MEMBER VARIABLES
    #------------------------
    #X State Machines
    class Sm(Enum):
        def _generate_next_value_(name, start, count, last_values):
            return name
        def __str__(self):
            return str(self.value)
        s1 = auto()
        Final = auto()

    class SmS1(Enum):
        def _generate_next_value_(name, start, count, last_values):
            return name
        def __str__(self):
            return str(self.value)
        Null = auto()
        s2 = auto()

    #------------------------
    # CONSTRUCTOR
    #------------------------
    def __init__(self):
        self._smS1 = None
        self._sm = None
        self.setSmS1(X.SmS1.Null)
        self.setSm(X.Sm.s1)

    #------------------------
    # INTERFACE
    #------------------------
    def getSmFullName(self):
        answer = self._sm.__str__()
        if self._smS1 != X.SmS1.Null :
            answer += "." + self._smS1.__str__()
        return answer

    def getSm(self):
        return self._sm

    def getSmS1(self):
        return self._smS1

    def goToFinal(self):
        wasEventProcessed = False
        aSmS1 = self._smS1
        if aSmS1 == X.SmS1.s2 :
            self.exitSm()
            self.setSm(X.Sm.Final)
            wasEventProcessed = True
        else :
            # Other states do respond to this event
            pass
        return wasEventProcessed

    def exitSm(self):
        if self._sm == X.Sm.s1 :
            self.exitSmS1()

    def setSm(self, aSm):
        self._sm = aSm
        # entry actions and do activities
        if self._sm == X.Sm.s1 :
            if self._smS1 == X.SmS1.Null :
                self.setSmS1(X.SmS1.s2)
        elif self._sm == X.Sm.Final :
            self.delete()

    def exitSmS1(self):
        if self._smS1 == X.SmS1.s2 :
            self.setSmS1(X.SmS1.Null)

    def setSmS1(self, aSmS1):
        self._smS1 = aSmS1
        if self._sm != X.Sm.s1 and aSmS1 != X.SmS1.Null :
            self.setSm(X.Sm.s1)

    def delete(self):
        pass

