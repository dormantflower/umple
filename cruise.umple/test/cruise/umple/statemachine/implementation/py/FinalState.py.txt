from enum import Enum, auto

class Mentor():
    class Status(Enum):
        def _generate_next_value_(name, start, count, last_values):
            return name
        def __str__(self):
            return str(self.value)
        Ok = auto()
        Final = auto()

    def __init__(self):
        self._status = None
        self.setStatus(Mentor.Status.Ok)

    def getStatusFullName(self):
        answer = self._status.__str__()
        return answer

    def getStatus(self):
        return self._status

    def flip(self):
        wasEventProcessed = False
        aStatus = self._status
        if aStatus == Mentor.Status.Ok :
            self.setStatus(Mentor.Status.Final)
            wasEventProcessed = True
        else :
            pass
        return wasEventProcessed

    def setStatus(self, aStatus):
        self._status = aStatus
        if self._status == Mentor.Status.Final :
            self.delete()

    def delete(self):
        pass
