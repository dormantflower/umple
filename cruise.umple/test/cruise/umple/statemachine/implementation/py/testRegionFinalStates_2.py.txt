from enum import Enum, auto

class X():
    class Sm(Enum):
        def _generate_next_value_(name, start, count, last_values):
            return name
        def __str__(self):
            return str(self.value)
        s1 = auto()

    class SmS1S2(Enum):
        def _generate_next_value_(name, start, count, last_values):
            return name
        def __str__(self):
            return str(self.value)
        Null = auto()
        s2 = auto()

    class SmS1S3(Enum):
        def _generate_next_value_(name, start, count, last_values):
            return name
        def __str__(self):
            return str(self.value)
        Null = auto()
        s3 = auto()

    class SmS1S3S3(Enum):
        def _generate_next_value_(name, start, count, last_values):
            return name
        def __str__(self):
            return str(self.value)
        Null = auto()
        s4 = auto()
        s5 = auto()

    def __init__(self):
        self._smS1S3S3 = None
        self._smS1S3 = None
        self._smS1S2 = None
        self._sm = None
        self.setSmS1S2(X.SmS1S2.Null)
        self.setSmS1S3(X.SmS1S3.Null)
        self.setSmS1S3S3(X.SmS1S3S3.Null)
        self.setSm(X.Sm.s1)

    def getSmFullName(self):
        answer = self._sm.__str__()
        if self._smS1S2 != X.SmS1S2.Null :
            answer += "." + self._smS1S2.__str__()
        if self._smS1S3 != X.SmS1S3.Null :
            answer += "." + self._smS1S3.__str__()
        if self._smS1S3S3 != X.SmS1S3S3.Null :
            answer += "." + self._smS1S3S3.__str__()
        return answer

    def getSm(self):
        return self._sm

    def getSmS1S2(self):
        return self._smS1S2

    def getSmS1S3(self):
        return self._smS1S3

    def getSmS1S3S3(self):
        return self._smS1S3S3

    def goToS3(self):
        wasEventProcessed = False
        aSmS1S2 = self._smS1S2
        if aSmS1S2 == X.SmS1S2.s2 :
            self.exitSmS1S2()
            self.setSmS1S3(X.SmS1S3.s3)
            self.setSmS1S2(X.SmS1S2.s2)
            wasEventProcessed = True
        else :
            pass
        return wasEventProcessed

    def goToS5(self):
        wasEventProcessed = False
        aSmS1S3S3 = self._smS1S3S3
        if aSmS1S3S3 == X.SmS1S3S3.s4 :
            self.exitSmS1S3S3()
            self.setSmS1S3S3(X.SmS1S3S3.s5)
            wasEventProcessed = True
        else :
            pass
        return wasEventProcessed

    def exitSm(self):
        if self._sm == X.Sm.s1 :
            self.exitSmS1S2()
            self.exitSmS1S3()

    def setSm(self, aSm):
        self._sm = aSm
        if self._sm == X.Sm.s1 :
            if self._smS1S2 == X.SmS1S2.Null :
                self.setSmS1S2(X.SmS1S2.s2)
            if self._smS1S3 == X.SmS1S3.Null :
                self.setSmS1S3(X.SmS1S3.s3)

    def exitSmS1S2(self):
        if self._smS1S2 == X.SmS1S2.s2 :
            self.setSmS1S2(X.SmS1S2.Null)

    def setSmS1S2(self, aSmS1S2):
        self._smS1S2 = aSmS1S2
        if self._sm != X.Sm.s1 and aSmS1S2 != X.SmS1S2.Null :
            self.setSm(X.Sm.s1)

    def exitSmS1S3(self):
        if self._smS1S3 == X.SmS1S3.s3 :
            self.exitSmS1S3S3()
            self.setSmS1S3(X.SmS1S3.Null)

    def setSmS1S3(self, aSmS1S3):
        self._smS1S3 = aSmS1S3
        if self._sm != X.Sm.s1 and aSmS1S3 != X.SmS1S3.Null :
            self.setSm(X.Sm.s1)
        if self._smS1S3 == X.SmS1S3.s3 :
            if self._smS1S3S3 == X.SmS1S3S3.Null :
                self.setSmS1S3S3(X.SmS1S3S3.s4)

    def exitSmS1S3S3(self):
        if self._smS1S3S3 == X.SmS1S3S3.s4 :
            self.setSmS1S3S3(X.SmS1S3S3.Null)
        elif self._smS1S3S3 == X.SmS1S3S3.s5 :
            self.setSmS1S3S3(X.SmS1S3S3.Null)

    def setSmS1S3S3(self, aSmS1S3S3):
        self._smS1S3S3 = aSmS1S3S3
        if self._smS1S3 != X.SmS1S3.s3 and aSmS1S3S3 != X.SmS1S3S3.Null :
            self.setSmS1S3(X.SmS1S3.s3)
        if self._smS1S3S3 == X.SmS1S3S3.s5 :
            self.delete()

    def delete(self):
        pass
