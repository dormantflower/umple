/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE 1.33.0.6934.a386b0a58 modeling language!*/

package example;
import java.util.HashSet;
import java.util.Map;
import java.util.HashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.ArrayList;
import java.util.List;
import java.sql.*;
import java.lang.reflect.Constructor;

// line 46 "../ToJsonComplexTest.ump"
public class Registration
{

  //------------------------
  // MEMBER VARIABLES
  //------------------------

  //Registration Attributes
  private String grade;

  //Registration Associations
  private Student student;
  private CourseSection courseSection;

  //Helper Variables
  private int cachedHashCode;
  private boolean canSetStudent;
  private boolean canSetCourseSection;

  //------------------------
  // CONSTRUCTOR
  //------------------------

  public Registration(Student aStudent, CourseSection aCourseSection)
  {
    cachedHashCode = -1;
    canSetStudent = true;
    canSetCourseSection = true;
    grade = null;
    boolean didAddStudent = setStudent(aStudent);
    if (!didAddStudent)
    {
      throw new RuntimeException("Unable to create registration due to student. See http://manual.umple.org?RE002ViolationofAssociationMultiplicity.html");
    }
    boolean didAddCourseSection = setCourseSection(aCourseSection);
    if (!didAddCourseSection)
    {
      throw new RuntimeException("Unable to create registration due to courseSection. See http://manual.umple.org?RE002ViolationofAssociationMultiplicity.html");
    }
  }

  //------------------------
  // INTERFACE
  //------------------------

  public boolean setGrade(String aGrade)
  {
    boolean wasSet = false;
    grade = aGrade;
    wasSet = true;
    return wasSet;
  }

  public String getGrade()
  {
    return grade;
  }
  /* Code from template association_GetOne */
  public Student getStudent()
  {
    return student;
  }
  /* Code from template association_GetOne */
  public CourseSection getCourseSection()
  {
    return courseSection;
  }
  /* Code from template association_SetOneToManyAssociationClass */
  public boolean setStudent(Student aStudent)
  {
    boolean wasSet = false;
    if (!canSetStudent) { return false; }
    if (aStudent == null)
    {
      return wasSet;
    }

    Student existingStudent = student;
    student = aStudent;
    if (existingStudent != null && !existingStudent.equals(aStudent))
    {
      existingStudent.removeRegistration(this);
    }
    if (!student.addRegistration(this))
    {
      student = existingStudent;
      wasSet = false;
    }
    else
    {
      wasSet = true;
    }
    return wasSet;
  }
  /* Code from template association_SetOneToManyAssociationClass */
  public boolean setCourseSection(CourseSection aCourseSection)
  {
    boolean wasSet = false;
    if (!canSetCourseSection) { return false; }
    if (aCourseSection == null)
    {
      return wasSet;
    }

    CourseSection existingCourseSection = courseSection;
    courseSection = aCourseSection;
    if (existingCourseSection != null && !existingCourseSection.equals(aCourseSection))
    {
      existingCourseSection.removeRegistration(this);
    }
    if (!courseSection.addRegistration(this))
    {
      courseSection = existingCourseSection;
      wasSet = false;
    }
    else
    {
      wasSet = true;
    }
    return wasSet;
  }

  public boolean equals(Object obj)
  {
    if (obj == null) { return false; }
    if (!getClass().equals(obj.getClass())) { return false; }

    Registration compareTo = (Registration)obj;
  
    if (getStudent() == null && compareTo.getStudent() != null)
    {
      return false;
    }
    else if (getStudent() != null && !getStudent().equals(compareTo.getStudent()))
    {
      return false;
    }

    if (getCourseSection() == null && compareTo.getCourseSection() != null)
    {
      return false;
    }
    else if (getCourseSection() != null && !getCourseSection().equals(compareTo.getCourseSection()))
    {
      return false;
    }

    return true;
  }

  public int hashCode()
  {
    if (cachedHashCode != -1)
    {
      return cachedHashCode;
    }
    cachedHashCode = 17;
    if (getStudent() != null)
    {
      cachedHashCode = cachedHashCode * 23 + getStudent().hashCode();
    }
    else
    {
      cachedHashCode = cachedHashCode * 23;
    }
    if (getCourseSection() != null)
    {
      cachedHashCode = cachedHashCode * 23 + getCourseSection().hashCode();
    }
    else
    {
      cachedHashCode = cachedHashCode * 23;
    }

    canSetStudent = false;
    canSetCourseSection = false;
    return cachedHashCode;
  }

  public void delete()
  {
    Student placeholderStudent = student;
    this.student = null;
    if(placeholderStudent != null)
    {
      placeholderStudent.removeRegistration(this);
    }
    CourseSection placeholderCourseSection = courseSection;
    this.courseSection = null;
    if(placeholderCourseSection != null)
    {
      placeholderCourseSection.removeRegistration(this);
    }
  }


  public String toString()
  {
    return super.toString() + "["+
            "grade" + ":" + getGrade()+ "]" + System.getProperties().getProperty("line.separator") +
            "  " + "student = "+(getStudent()!=null?Integer.toHexString(System.identityHashCode(getStudent())):"null") + System.getProperties().getProperty("line.separator") +
            "  " + "courseSection = "+(getCourseSection()!=null?Integer.toHexString(System.identityHashCode(getCourseSection())):"null");
  }
       
  /*
  * Generate Json for this object and connected objects visited objects to enable avoidance of infinite loops
  *
  * @return a string in Json  format of this object
  */ 
  public String toJson()
  {
    HashSet<Object> visitedList = new HashSet<Object>();
    StringBuilder toJsonOutput = new StringBuilder();
    toJsonOutput.append("{\n");
    this.toJsonHelper(toJsonOutput, visitedList,1,true);
    toJsonOutput.append("\n}");
    return(toJsonOutput.toString());
  }
   
  /*
  * Helper function to generate Json for this object and connected objects visited objects to enable avoidance of infinite loops
  *
  * @param toJsonOutput  Output is aded to this as the network of objects is traversed
  * @param visitedList  Every concrete object visited is added so we don't re-outpu
  * @param nestLevel    As we output deeper objects, indent them more
  * @param atConcreteClass false when we are recursing to a superclass
  *     so we get the superclass data
  * @return whether or not anything was output (so we can tell whether we need to output a comma)
  */ 
  public boolean toJsonHelper(StringBuilder toJsonOutput, HashSet<Object> visitedList, int nestLevel, boolean atConcreteClass){
      
      String indent = "  ".repeat(nestLevel);
      boolean alreadyVisited = false;
      boolean haveOutputItem = false;
      
    if(atConcreteClass) {
      // This will not be true in a super call; output header
      toJsonOutput.append(indent+"\""+this.toString().split("@")[0]+ "\" : {\n"+indent+ "  \"umpleObjectID\" : \""+System.identityHashCode(this)+"\"");
      // Check if we have already visited this object. If so we will not output details
      alreadyVisited = visitedList.contains(this);
      if(!alreadyVisited) {
        toJsonOutput.append(",\n");
        visitedList.add(this);
      }
    }
    
    // There is no superclass of this class
    if(alreadyVisited) {
      toJsonOutput.append("\n");
    }
    else {
      // Check if this class has a superclass. If it does, we make a call to output superclass content 
      // This will keep calling super so the topmost attributes and associations appear first
      // When an object has not already been visited, output its details
      if(haveOutputItem){
      //toJsonOutput.append(",\n");  
      }
        
          if(haveOutputItem){
            toJsonOutput.append(",\n");
          }
          toJsonOutput.append(indent);
          toJsonOutput.append("  \"");
          toJsonOutput.append("grade");
          toJsonOutput.append("\" : \"");
          String primValue_0=""+getGrade()+"";
          toJsonOutput.append(primValue_0.replace("\\","\\\\").replace("\"","\\\""));
          toJsonOutput.append("\"");
          haveOutputItem=true;
      //haveOutputItem = false;
      //haveOutputItem = false;
         if(haveOutputItem) {
           toJsonOutput.append(",\n");
         }
          toJsonOutput.append(indent);
            toJsonOutput.append("\n"+indent);
            toJsonOutput.append("  \"");
            toJsonOutput.append("student");
            toJsonOutput.append("\"");
            toJsonOutput.append(" : ");
            toJsonOutput.append("\n");
            toJsonOutput.append(indent+"  {");
            toJsonOutput.append("\n");Student anotherItem_0 = getStudent();
            anotherItem_0.toJsonHelper(toJsonOutput, visitedList, nestLevel+2, true);
            toJsonOutput.append("\n");
            toJsonOutput.append(indent+"  }");
            haveOutputItem=true;
         if(haveOutputItem) {
           toJsonOutput.append(",\n");
         }
          toJsonOutput.append(indent);
            toJsonOutput.append("\n"+indent);
            toJsonOutput.append("  \"");
            toJsonOutput.append("courseSection");
            toJsonOutput.append("\"");
            toJsonOutput.append(" : ");
            toJsonOutput.append("\n");
            toJsonOutput.append(indent+"  {");
            toJsonOutput.append("\n");CourseSection anotherItem_1 = getCourseSection();
            anotherItem_1.toJsonHelper(toJsonOutput, visitedList, nestLevel+2, true);
            toJsonOutput.append("\n");
            toJsonOutput.append(indent+"  }");
            haveOutputItem=true;
              
          toJsonOutput.append(indent+"  \n");
    }
    // Finalize the output of the concrete class
    if(atConcreteClass) {
      if(!alreadyVisited) {
        toJsonOutput.append("\n");
      }
      toJsonOutput.append(indent+"}");
    }
    haveOutputItem = true;
    return haveOutputItem;
  }

  
      
  /*
  * Deserialize Json string to instantiate Objects from top-level class
  *
  * @param umpleObjectIDMap<String, Object> mapping parsed objectID (from Json string) with newly instantiated object's objectID
  * 
  * @param String aJsonString is the string in json format that is to be processed and turned into an object
  *
  * @return newly instantiated Object 
  */  

  public static Registration fromJson(String aJsonString){
    // process the input jsonString so that it can further processed using regex
    aJsonString=aJsonString.replace("\n","").replace(" ","");   
    // a map to store the umpleObjectID present in jsonString
    Map<String, Object> umpleObjectIDMap=new HashMap<>();
    
    // instantiate a new object
Registration anObject = new Registration(aJsonString, umpleObjectIDMap);
    return anObject;
  }
   
  /*
  * A new constructor specifically implemented if -s genJson is specified
  * 
  * @param String aJsonString is the string in json format that is to be processed and turned into an object
  *
  * @param umpleObjectIDMap<String, Integer> mapping parsed objectID (from Json string) with newly instantiated object's objectID
  */ 
  @SuppressWarnings("unchecked")
  public Registration(String aJsonString, Map<String, Object> umpleObjectIDMap){
    // Initialize a HashMap to store the parsed result
    // key is the attribute name present in the jsonString
    // value is the attribute value present in the jsonString
      boolean visitedSuperClass=false;
    
    HashMap<String,String> parsedResult = new HashMap<String,String>();
    parsedResult = fromJsonParser(aJsonString);
    if(!parsedResult.isEmpty()){
    boolean classExist;
    boolean classChildExist;
    String parsedClassName=parsedResult.get("className");
    String childName=this.getClass().getSimpleName();
    classExist="Registration".equals(parsedClassName);
    classChildExist=childName.equals(parsedClassName);
    // if top-level class does not exist, throw exception
    if(!classExist&&!classChildExist){
      throw new IllegalArgumentException("Top-level class \""+parsedClassName+"\" does not exist, please check the input json string");
    }
    String umpleObjectId=parsedResult.get("umpleObjectID");
    // Check if the object has already been visited and created
    //if((umpleObjectIDMap.get(umpleObjectId)==null)||visitedSuperClass){
      try{
      
    visitedSuperClass=false;
    // map the old objectID (in jsonString) with the newly created object's hashCode in umpleObjectIDMap 
    umpleObjectIDMap.put(umpleObjectId,this);
    
    String jsonKey="";
       jsonKey="grade";
       //more types should be considered here
        this.grade=parsedResult.get(jsonKey);
    
    // below for-loop check the association class of the top level class
       
       jsonKey="student";
       String newJsonString_0=parsedResult.get(jsonKey);
       String newIDRegex_0="\\\"umpleObjectID\\\"\\:\\\"[0-9]*\\\"";
       String newUmpleID_0=fromJsonParserHelper(newJsonString_0,newIDRegex_0);
       
          cachedHashCode=-1;
       //Multiple associations
          
          if(!umpleObjectIDMap.containsKey(newUmpleID_0)){
            String newClassNameOne_0=fromJsonParserClassName(newJsonString_0);
            Class clazzOne_0=Class.forName(newClassNameOne_0);
            Constructor constructorOne_0=clazzOne_0.getConstructor(String.class, Map.class);
            Object objectNewOne_0=constructorOne_0.newInstance(newJsonString_0,umpleObjectIDMap);
Student oneAssoObj_0=(Student)objectNewOne_0;
student=oneAssoObj_0;
          }
          else{
student=(Student)umpleObjectIDMap.get(newUmpleID_0);
          }

       
       jsonKey="courseSection";
       String newJsonString_1=parsedResult.get(jsonKey);
       String newIDRegex_1="\\\"umpleObjectID\\\"\\:\\\"[0-9]*\\\"";
       String newUmpleID_1=fromJsonParserHelper(newJsonString_1,newIDRegex_1);
       
          cachedHashCode=-1;
       //Multiple associations
          
          if(!umpleObjectIDMap.containsKey(newUmpleID_1)){
            String newClassNameOne_1=fromJsonParserClassName(newJsonString_1);
            Class clazzOne_1=Class.forName(newClassNameOne_1);
            Constructor constructorOne_1=clazzOne_1.getConstructor(String.class, Map.class);
            Object objectNewOne_1=constructorOne_1.newInstance(newJsonString_1,umpleObjectIDMap);
CourseSection oneAssoObj_1=(CourseSection)objectNewOne_1;
courseSection=oneAssoObj_1;
          }
          else{
courseSection=(CourseSection)umpleObjectIDMap.get(newUmpleID_1);
          }


    
    }catch(Exception e){
    }

    //}
  }
  } 
  /*
  * A json parser to parse the input jsonString, if -s genJson is specified
  * 
  * @param String aJsonString is the string in json format that is to be processed and turned into an object
  *
  * @ return HashMap<String,String> that stores paresed result, key is the attribute(or associations) of an object, value is the attribute value or association string
  */ 
  public static HashMap<String,String> fromJsonParser(String jsonString){
    
    HashMap<String,String> parsedResultMap = new HashMap<String,String>();
    try{
      //Below (String, Pattern, Matcher) are the regex strings and their patterns and matcher used to process a jsonString
    
        // topLevelString is the regex representing the topLevel class name
        String topLevelString = "\\{\\\"[A-Z]\\w*\\\":";
        Pattern topLevelPattern = Pattern.compile(topLevelString);
        Matcher topLevelMatcher = topLevelPattern.matcher(jsonString);
        String quotes="\\\"";
        String colon="\\:";
        String colonSquareBracket="\\:\\[";
        
        if(topLevelMatcher.find()){
            //actual string that represent the topLevel className
            String topLevelStringFound=topLevelMatcher.group(0);
            String className=topLevelStringFound.split(quotes)[1];
            parsedResultMap.put("className", className);
            jsonString=jsonString.split(topLevelString,2)[1];
            
            //objIDString is the regex representing umpleObjectID that could be found in jsonString
            String objIDString = "\"umpleObjectID\"\\:\"[0-9]*\",";
            Pattern objIDPattern = Pattern.compile(objIDString);
            Matcher objIDMatcher = objIDPattern.matcher(jsonString);
            if(objIDMatcher.find()){
              String objIDFound=objIDMatcher.group(0);
              parsedResultMap.put("umpleObjectID", objIDFound.split(colon)[1].split(quotes)[1]);
              jsonString=jsonString.replaceFirst(objIDFound,"");
            }
            String timeString="\\\"\\w*\\\"\\:\\\"\\d{2}:\\d{2}\\:\\d{2}\\\"";
            Pattern timeStringPattern=Pattern.compile(timeString);
            Matcher timeStringPatternMatcher=timeStringPattern.matcher(jsonString);
            if(timeStringPatternMatcher.find()){
              String timeStringFound=timeStringPatternMatcher.group(0);
              parsedResultMap.put(timeStringFound.split(colon,2)[0].split(quotes)[1], timeStringFound.split(colon,2)[1].split(quotes)[1]);
          
            }
            // pairString is the regex for an object's attribute and attribute value, the string parsed will be in key-value formate
        String pairString = "(\\\"(?!umpleObjectID)[^\\\"]+)\\\":\\\"((?:\\\\\\\"|[^\\\"])*)";
        Pattern pairPattern=Pattern.compile(pairString);
        Matcher pairMatcher=pairPattern.matcher(jsonString);
        String associationString="(?=\\\"\\w*\\\"\\:\\[\\{)(?:(?=.*?\\[\\{(?!.*?\\1)(.*\\}\\](?!.*\\2).*))(?=.*?\\}\\](?!.*?\\2)(.*)).)+?.*?(?=\\1)[^\\[]*(?=\\2$)";
        Pattern associationPattern=Pattern.compile(associationString);
        String newObjJsonString="(?=\\,\\\"\\w*\\\"\\:\\{)(?:(?=.*?\\{\\\"(?!.*?\\1)(.*\\}(?!.*\\2).*))(?=.*?\\}(?!.*?\\2)(.*)).)+?.*?(?=\\1)[^\\{]*(?=\\2$)";
        Pattern newObjJsonPattern=Pattern.compile(newObjJsonString);
        String quoteColonQuote="\\\"\\:\\\"";
        //Keep on parsing the attribute's key-value pair, 
        //until a List (multi-associations) pattern or a newObject parttern (single association) is found
        while(pairMatcher.find()){
               String pairStringFound=pairMatcher.group(0);
              if(parsedResultMap.get(pairStringFound.split(colon)[0].split(quotes)[1])==null){
                String keyPair=pairStringFound.split(colon)[0].split(quotes)[1];
                String valuePair=pairStringFound.split(quoteColonQuote,2)[1];
                keyPair=keyPair.replace("\\\\","\\").replace("\\\"","\"");
                valuePair=valuePair.replace("\\\\","\\").replace("\\\"","\"");
                parsedResultMap.put(keyPair,valuePair);
                jsonString=jsonString.replaceFirst(pairString, "");
              }
                int lastIndex = 0;
                while (lastIndex<jsonString.length()){
                  String remainingJson=jsonString.substring(lastIndex);
                  Matcher associationMatcher=associationPattern.matcher(jsonString);
                  Matcher newObjJsonMatcher=newObjJsonPattern.matcher(jsonString);
                  
                  boolean assoFound=associationMatcher.find();
                  boolean newObjFound=newObjJsonMatcher.find();
                  
                  if (assoFound&&(!newObjFound||associationMatcher.start()<newObjJsonMatcher.start())){
                    String assoStringFound=associationMatcher.group(0);
                    String associationName=assoStringFound.split(colon,2)[0].split(quotes)[1];;
                    String associationItems=assoStringFound.split(colonSquareBracket,2)[1];
                    parsedResultMap.put(associationName, associationItems);
                    jsonString=jsonString.replaceFirst(associationString, "");
                  }
                  else if (newObjFound){
                    String newObjJsonFound=newObjJsonMatcher.group(0);
                    String newObjName=newObjJsonFound.split(colon,2)[0].split(quotes)[1];
                    String newObjItems=newObjJsonFound.split(colon,2)[1];
                    parsedResultMap.put(newObjName, newObjItems);
                    jsonString=jsonString.replaceFirst(newObjJsonString, "");
                  }else{
                    break;
                  }
                }
        }
        }
        return parsedResultMap;
    }catch(NullPointerException e){
      return parsedResultMap;
    }
  }
   
  public static String fromJsonParserHelper(String jsonString, String regexString){
    String umpleID = "";
    String quo="\\\"";
    try{
      Pattern umpleIDPattern=Pattern.compile(regexString);
      Matcher umpleIDMatcher=umpleIDPattern.matcher(jsonString);
      if(umpleIDMatcher.find()){
        String umpleIDStringFound=umpleIDMatcher.group(0);
        String idString="\\\"\\d*\\\"";
        Pattern idPattern=Pattern.compile(idString);
        Matcher idMatcher=idPattern.matcher(umpleIDStringFound);
        if(idMatcher.find()){
          umpleID=idMatcher.group(0).split(quo)[1];
        }
      }
      return umpleID;
    } catch(NullPointerException e){
      return umpleID;
    }
  }
   
  public static List<String> fromJsonParserList(String objListString){
    List<String> objList=new ArrayList<String>();
    try{
      String objString="(?:(?=.*?\\{(?!.*?\\1)(.*\\}(?!.*\\2).*))(?=.*?\\}(?!.*?\\2)(.*)).)+?.*?(?=\\1)[^\\{]*(?=\\2$)";
      Pattern objStringPattern=Pattern.compile(objString);
      Matcher objStringMatcher=objStringPattern.matcher(objListString);
      while(objStringMatcher.find()){
        objList.add(objStringMatcher.group(0));
      }
      return objList;
   }catch(NullPointerException e){
     return objList;
   }
  }
   
  public static String fromJsonParserClassName(String objNameString){
    String nextName="";
    String quotes="\\\"";
    try{
      String nextNameString="\\{\\\"[A-Z]\\w*\\\":";
      Pattern nextNamePattern=Pattern.compile(nextNameString);
      Matcher nextNameMatcher=nextNamePattern.matcher(objNameString);
      if(nextNameMatcher.find()){
        nextName=nextNameMatcher.group(0).split(quotes)[1];
       
      }
      return nextName;
   }catch(NullPointerException e){
     return nextName;
   }
  }
  
}