from Mentor import Mentor

class Student():
    def __init__(self, aNumber):
        self._number = aNumber
        self._mentors = []

    def setNumber(self, aNumber):
        wasSet = False
        self._number = aNumber
        wasSet = True
        return wasSet

    def getNumber(self):
        return self._number

    def getMentor(self, index):
        aMentor = self._mentors[index]
        return aMentor

    def getMentors(self):
        newMentors = tuple(self._mentors)
        return newMentors

    def numberOfMentors(self):
        self._number = len(self._mentors)
        return self._number

    def hasMentors(self):
        has = len(self._mentors) > 0
        return has

    def indexOfMentor(self, aMentor):
        index = self._mentors.index(aMentor)
        return index

    @staticmethod
    def minimumNumberOfMentors():
        return 0

    def addMentor(self, aMentor):
        wasAdded = False
        if aMentor in self._mentors :
            return False

        existingStudent = aMentor.getStudent()
        if existingStudent is None :
            aMentor.setStudent(self)

        elif not self.equals(existingStudent) :
            existingStudent.removeMentor(aMentor)
            self.addMentor(aMentor)

        else :
            self._mentors.append(aMentor)

        wasAdded = True
        return wasAdded

    def removeMentor(self, aMentor):
        wasRemoved = False
        if aMentor in self._mentors :
            self._mentors.remove(aMentor)
            aMentor.setStudent(None)
            wasRemoved = True

        return wasRemoved

    def addMentorAt(self, aMentor, index):
        wasAdded = False
        if self.addMentor(aMentor) :
            if index < 0 :
                index = 0

            if index > self.numberOfMentors() :
                index = self.numberOfMentors() - 1

            self._mentors.remove(aMentor)
            self._mentors.insert(index, aMentor)
            wasAdded = True

        return wasAdded

    def addOrMoveMentorAt(self, aMentor, index):
        wasAdded = False
        if aMentor in self._mentors :
            if index < 0 :
                index = 0

            if index > self.numberOfMentors() :
                index = self.numberOfMentors() - 1

            self._mentors.remove(aMentor)
            self._mentors.insert(index, aMentor)
            wasAdded = True

        else :
            wasAdded = self.addMentorAt(aMentor, index)

        return wasAdded

    def delete(self):
        for aMentor in self._mentors:
            aMentor.setStudent(None)

    def __str__(self):
        return str(super()) + "[" + "number" + ":" + self.getNumber() + "]"

