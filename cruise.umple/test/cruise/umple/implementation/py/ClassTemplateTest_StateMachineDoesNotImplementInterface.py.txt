#PLEASE DO NOT EDIT THIS CODE
#This code was generated using the UMPLE 1.32.1.6535.66c005ced modeling language!

from NetworkNode import NetworkNode
from enum import Enum, auto

class Router(NetworkNode):
    #------------------------
    # MEMBER VARIABLES
    #------------------------
    #Router Attributes
    #Router State Machines
    class Status(Enum):
        def _generate_next_value_(name, start, count, last_values):
            return name
        def __str__(self):
            return str(self.value)
        disconnected = auto()
        connected = auto()

    #------------------------
    # CONSTRUCTOR
    #------------------------
    def __init__(self, aIpAddress):
        self._status = None
        self._ipAddress = None
        self._ipAddress = aIpAddress
        self.setStatus(Router.Status.disconnected)

    #------------------------
    # INTERFACE
    #------------------------
    def getStatusFullName(self):
        answer = self._status.__str__()
        return answer

    def getStatus(self):
        return self._status

    def createConnection(self):
        wasEventProcessed = False
        aStatus = self._status
        if aStatus == Router.Status.disconnected :
            self.setStatus(Router.Status.connected)
            wasEventProcessed = True
        else :
            # Other states do respond to this event
            pass
        return wasEventProcessed

    def disconnectRequest(self):
        wasEventProcessed = False
        aStatus = self._status
        if aStatus == Router.Status.connected :
            self.setStatus(Router.Status.disconnected)
            wasEventProcessed = True
        else :
            # Other states do respond to this event
            pass
        return wasEventProcessed

    def setStatus(self, aStatus):
        self._status = aStatus

    def delete(self):
        pass

    def connect(self):
        return False

    def disconnect(self):
        return False

    def errorDetected(self):
        return False

    def __str__(self):
        return str(super().__str__()) + "[" + "]"

