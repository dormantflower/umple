#PLEASE DO NOT EDIT THIS CODE
#This code was generated using the UMPLE 1.32.1.6535.66c005ced modeling language!
# line 3 "../OptionalOneToNTest.ump"

class Mentor():
    #------------------------
    # MEMBER VARIABLES
    #------------------------
    #Mentor Attributes
    #Mentor Associations
    #------------------------
    # CONSTRUCTOR
    #------------------------
    def __init__(self, aName, *allStudents):
        allStudents = list(allStudents)
        self._students = None
        self._name = None
        self._name = aName
        self._students = []
        didAddStudents = self.setStudents(*allStudents)
        if not didAddStudents :
            raise RuntimeError ("Unable to create Mentor, must have 3 students. See http://manual.umple.org?RE002ViolationofAssociationMultiplicity.html")

    #------------------------
    # INTERFACE
    #------------------------
    def setName(self, aName):
        wasSet = False
        self._name = aName
        wasSet = True
        return wasSet

    def getName(self):
        return self._name

    # Code from template association_GetMany 
    def getStudent(self, index):
        aStudent = self._students[index]
        return aStudent

    def getStudents(self):
        newStudents = tuple(self._students)
        return newStudents

    def numberOfStudents(self):
        number = len(self._students)
        return number

    def hasStudents(self):
        has = len(self._students) > 0
        return has

    def indexOfStudent(self, aStudent):
        index = (-1 if not aStudent in self._students else self._students.index(aStudent))
        return index

    # Code from template association_RequiredNumberOfMethod 
    @staticmethod
    def requiredNumberOfStudents():
        return 3

    # Code from template association_MinimumNumberOfMethod 
    @staticmethod
    def minimumNumberOfStudents():
        return 3

    # Code from template association_MaximumNumberOfMethod 
    @staticmethod
    def maximumNumberOfStudents():
        return 3

    # Code from template association_SetNToOptionalOne 
    def setStudents(self, *newStudents):
        newStudents = list(newStudents)
        wasSet = False
        checkNewStudents = []
        for aStudent in newStudents:
            if (aStudent) in checkNewStudents :
                return wasSet
            elif not (aStudent.getMentor() is None) and not self == aStudent.getMentor() :
                return wasSet
            checkNewStudents.append(aStudent)

        if len(checkNewStudents) != Mentor.minimumNumberOfStudents() :
            return wasSet
        self._students = list(filter(lambda a : not a in checkNewStudents, self._students))
        for orphan in self._students:
            self.setMentor(orphan, None)

        self._students.clear()
        for aStudent in newStudents:
            self.setMentor(aStudent, self)
            self._students.append(aStudent)

        wasSet = True
        return wasSet

    # Code from template association_GetPrivate 
    def setMentor(self, aStudent, aMentor):
        try :
            aStudent._mentor = aMentor
        except :
            raise RuntimeError ("Issue internally setting aMentor to aStudent")

    def delete(self):
        for aStudent in self._students:
            self.setMentor(aStudent, None)

        self._students.clear()

    def __str__(self):
        return str(super().__str__()) + "[" + "name" + ":" + str(self.getName()) + "]"

