
namespace cruise.statemachine.test;

class CourseA
{
  status { }
}

class CourseB
{
  log = "initial value";
  
  status {
    Open {
      entry / { log = "entry called"; }
      exit / { log = "exit called"; }
      anEvent -> Closed;
    }
    Closed {
      anEvent -> Open;
    }
  }
}

class CourseE
{

  String[] logs;
  
  status
  {
    Off
    {
      entry / { addLog("Enter Off"); }
      exit / { addLog("Exit Off"); }
      turnOn -> On;
      turnSleep -> Sleep;
    }
    Sleep
    {
      entry / { addLog("Enter Sleep"); }
      exit / { addLog("Exit Sleep"); }
      wake -> Pause;
    }
    On
    {
      entry / { addLog("Enter On"); }
      exit / { addLog("Exit On"); }
      
      turnOff -> Off;
      Play 
      { 
        entry / { addLog("Enter Play"); }
        exit / { addLog("Exit Play"); }
        push -> Pause;
      }
      Pause
      {
        entry / { addLog("Enter Pause"); }
        exit / { addLog("Exit Pause"); }
        push -> Play;      
        standby -> Sleep;
      }      
      
    }
  }
 
}

class CourseK
{
  String[] logs;
  
  status
  {
    On { flip -> Final; }
  }

  after delete {  addLog("deleted"); }
  
}

class CourseL
{
  String[] logs;
  
  status
  {
    On
    {
      MotorIdle
      {
        flip -> Final; 
      }
      
      ||
      
      FanIdle
      {
        flop -> Final;  
      }
      
    }

  }

  after delete {  addLog("deleted"); }
  
}

class CourseR
{
  String[] logs;
  one
  {
    Off {
     entry / { addLog("Enter Off"); }
     exit / { addLog("Exit Off"); }
     -> On;
    }
    On { 
      entry / { addLog("Enter On"); }
      exit / { addLog("Exit On"); }
    }  
  }
}

class CourseS
{
  String[] logs;
  one
  {
    Off {
     entry / { addLog("Enter Off 1"); }
     entry / { addLog("Enter Off 2"); }
     exit / { addLog("Exit Off 1"); }
     exit / { addLog("Exit Off 2"); }
     flip -> On;
    }
    On { 
    }  
  }

}

class CourseT
{
  Integer count;
  one
  {
    Off {
     [count > 10] -> On;
     [count <= 10] -> Wait;
    }
    On { 
    }  
    Wait { 
    }  
  }
}

class StateMachineWithNegativeNumberGuard{
  Status{
    On{
      turnOff (Integer pn) [pn > -1] -> Off;
    }
    Off{
      turnOn -> On;
    }
  }
}

class ExitActionSelfTransition{
  boolean b = false;
  boolean exitCodeCalled = false;
  
  void execute_exit_code()
  {
    setExitCodeCalled(true);
  }
  
  sm{
    created{
      exit /{execute_exit_code();}
      init [b==false] -> created;
      init [b==true] -> initialized;
    }
    initialized{
      getback ->created;
    }
  } 
}