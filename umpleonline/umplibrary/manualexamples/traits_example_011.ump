/*
	Example 2: showing how the operator
	"Renaming (Aliasing) provided methods" works.
*/
trait T1{
  abstract method1(); 
  void method2() Java {/*implementation*/}
  void method3() Java {/*implementation*/}
  void method4() Java {/*implementation*/}
  void method5(Integer data) Java {/* implementation*/}

  void method2() Python {'''implementation'''}
  void method3() Python {'''implementation'''}
  void method4() Python {'''implementation'''}
  void method5(Integer data) Python {'''implementation'''}
}
class C1{
  isA T1< method2() as function2 >;
  void method1() Java {/*implementation related to C1*/}
  void method1() Python {'''implementation related to C1'''}
}
class C2{
  isA T1< method3() as private function3 >;
  void method1() Java {/*implementation related to C2*/}
  void method1() Python {'''implementation related to C2'''}
}
class C3{
  isA T1< +method5(Integer) as function5 >;
  void method1() Java {/*implementation related to C3*/}
  void method1() Python {'''implementation related to C3'''}
}